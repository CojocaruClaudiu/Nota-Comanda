generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================== CASH LEDGER MODULE ==================

model Company {
  id          String        @id @default(uuid())
  name        String        @unique
  code        String?       @unique // optional short code, ex: TOPAZC
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  cashAccounts CashAccount[]
  projects    Project[]     @relation("CompanyProjects")
  cashEntries CashEntry[]
  leavePolicies LeavePolicy[]
}

model CashAccount {
  id          String   @id @default(uuid())
  companyId   String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  cashEntries CashEntry[]

  @@unique([companyId, name])
  @@index([companyId])
}

// Categories for cash movements (Materiale, Diurna etc)
model CashCategory {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([name])
}

// Generic person taking/bringing cash (could map to Employee externally)
model Person {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum CashEntryType {
  IN
  OUT
}


model CashEntry {
  id             String           @id @default(uuid())
  companyId      String           // denormalized for quicker filters
  cashAccountId  String
  effectiveAt    DateTime
  type           CashEntryType
  amount         Decimal          @db.Decimal(14, 2)
  currency       Currency         @default(RON)
  employeeId     String?
  notes          String?
  transferGroupId String?         // shared uuid for transfers
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  company        Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  cashAccount    CashAccount      @relation(fields: [cashAccountId], references: [id], onDelete: Cascade)
  employee       Employee?        @relation("EmployeeCashEntries", fields: [employeeId], references: [id])

  @@index([cashAccountId, effectiveAt])
  @@index([transferGroupId])
}

// Extend existing Project with optional company (backwards compatible)


model Client {
  id                  String    @id @default(uuid())
  name                String
  location            String
  phone               String?
  email               String?
  registrulComertului String?   @unique
  cui                 String?   @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  projects            Project[]
  locations           ClientLocation[]
}

model Employee {
  id             String    @id @default(uuid())
  name           String
  cnp            String?  @unique // Cod Numeric Personal
  idSeries       String? // "PX"
  idNumber       String? // "821461"
  idIssuer       String? // "SPCLEP Băicoi"
  idIssueDateISO DateTime? // "2021-09-29"
  county         String? // ex: "Prahova"
  locality       String? // ex: "sat Novăcești (com. Florești)" or "Băicoi"
  address        String? // ex: "nr. 295" or full street
  phone          String? // ex: "+40 721 123 456"
  qualifications Qualification[]
  hiredAt        DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  birthDate      DateTime?
  cars           Car[]
  leaves         Leave[]
  cashEntries    CashEntry[] @relation("EmployeeCashEntries")
  policyOverride EmployeePolicyOverride?
}

model Leave {
  id                   String              @id @default(uuid())
  employeeId           String
  startDate            DateTime
  endDate              DateTime?
  days                 Int
  note                 String?
  
  // Enhanced leave tracking
  status               LeaveStatus         @default(APPROVED)
  requestedAt          DateTime            @default(now())
  approvedBy           String?
  approvedAt           DateTime?
  cancelledAt          DateTime?
  cancellationReason   String?
  
  // Company shutdown tracking
  isCompanyShutdown    Boolean             @default(false)
  shutdownId           String?
  
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  
  employee             Employee            @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  shutdown             CompanyShutdown?    @relation(fields: [shutdownId], references: [id])
  
  @@index([employeeId, startDate])
  @@index([status])
}

// Leave Policy System
model LeavePolicy {
  id                    String              @id @default(uuid())
  name                  String
  isCompanyDefault      Boolean             @default(false)
  companyId             String?
  
  // Base entitlement
  baseAnnualDays        Int                 @default(21)
  seniorityStepYears    Int                 @default(5)
  bonusPerStep          Int                 @default(1)
  
  // Accrual method
  accrualMethod         AccrualMethod       @default(PRO_RATA)
  roundingMethod        RoundingMethod      @default(FLOOR)
  
  // Carryover rules
  allowCarryover        Boolean             @default(true)
  maxCarryoverDays      Int?
  carryoverExpiryMonth  Int?                // 1-12
  carryoverExpiryDay    Int?                // 1-31
  
  // Negative balance
  maxNegativeBalance    Int                 @default(0)
  
  // Constraints
  maxConsecutiveDays    Int?
  minNoticeDays         Int?
  
  // Metadata
  active                Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  company               Company?            @relation(fields: [companyId], references: [id])
  employeeOverrides     EmployeePolicyOverride[]
  blackoutPeriods       BlackoutPeriod[]
  companyShutdowns      CompanyShutdown[]
  
  @@unique([companyId, isCompanyDefault])
  @@index([companyId, active])
}

model EmployeePolicyOverride {
  id                    String         @id @default(uuid())
  employeeId            String         @unique
  policyId              String
  
  // Override fields (null = use policy default)
  baseAnnualDays        Int?
  seniorityStepYears    Int?
  bonusPerStep          Int?
  accrualMethod         AccrualMethod?
  roundingMethod        RoundingMethod?
  allowCarryover        Boolean?
  maxCarryoverDays      Int?
  maxNegativeBalance    Int?
  maxConsecutiveDays    Int?
  
  reason                String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  employee              Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  policy                LeavePolicy    @relation(fields: [policyId], references: [id])
  
  @@index([employeeId])
}

model BlackoutPeriod {
  id              String       @id @default(uuid())
  policyId        String
  startDate       DateTime
  endDate         DateTime
  reason          String
  allowExceptions Boolean      @default(false)
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  policy          LeavePolicy  @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  @@index([policyId, startDate, endDate])
}

model CompanyShutdown {
  id                    String       @id @default(uuid())
  policyId              String
  startDate             DateTime
  endDate               DateTime
  days                  Int
  reason                String
  deductFromAllowance   Boolean      @default(true)
  
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  
  policy                LeavePolicy  @relation(fields: [policyId], references: [id], onDelete: Cascade)
  leaves                Leave[]
  
  @@index([policyId, startDate])
}

enum AccrualMethod {
  DAILY
  MONTHLY
  AT_YEAR_START
  PRO_RATA
}

enum RoundingMethod {
  FLOOR
  CEIL
  ROUND
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}


model Car {
  id          String    @id @default(uuid())
  vin         String    @unique
  marca       String
  model       String
  an          Int
  culoare     String?
  placute     String    @unique
  driverId    String?
  driverNote  String?
  combustibil FuelType?
  expItp      DateTime?
  expRca      DateTime?
  expRovi     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  driver      Employee? @relation(fields: [driverId], references: [id])

  @@index([expItp])
  @@index([expRca])
  @@index([expRovi])
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  name         String?
  passwordHash String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  roles        UserRole[]
}

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

model UserRole {
  userId Int
  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

enum FuelType {
  MOTORINA
  BENZINA
  BENZINA_GPL
  HIBRID_MOTORINA
  HIBRID_BENZINA
  ELECTRIC
  ALT
}

enum RoleName {
  ADMIN
  MANAGER
  STAFF
  VIEWER
}

model Furnizor {
  id            String   @id @default(uuid())
  id_tert       String?
  denumire      String   @unique
  cui_cif       String   @unique
  nrRegCom      String?
  den_catart    String? // category / articol denumire for filtering
  tva           Boolean
  tvaData       DateTime?
  adresa        String
  oras          String
  judet         String
  tara          String
  contactNume   String?
  email         String?
  telefon       String?
  site          String?
  metodaPlata   String
  contBancar    String?
  banca         String?
  status        String   // activ/inactiv
  notite        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  purchaseOrders PurchaseOrder[]

  @@index([den_catart])
}

// Manufacturers / Producers
model Producator {
  id         String   @id @default(uuid())
  name       String   @unique
  status     String   @default("activ") // activ / inactiv
  adresa     String?
  contBancar String?
  banca      String?
  email      String?
  telefon    String?
  site       String?
  observatii String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([status])
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  currency    Currency      @default(RON)
  clientId    String?
  client      Client?       @relation(fields: [clientId], references: [id])
  location    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  purchaseOrders PurchaseOrder[]
  // Back-relations for multi-project PO extensions
  receiptItems        PurchaseReceiptItem[]
  poItemAllocations   POItemAllocation[]
  invoiceDistributions InvoiceDistribution[]
  companyId   String? 
  company     Company?     @relation("CompanyProjects", fields: [companyId], references: [id])
  devizLines  ProjectDevizLine[]
  projectSheets ProjectSheet[] @relation("ProjectSheets")

  @@index([status])
  @@index([clientId])
}

model ProjectDevizLine {
  id              String   @id @default(uuid())
  projectId       String
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  orderNum        Int      // Display order: 1, 2, 3...
  code            String   // e.g., "01", "02", "03"
  description     String   // e.g., "LUCRARI DE TENCUIELI"
  priceLei        Float?   // Price in LEI (without VAT)
  priceEuro       Float?   // Price in EURO (without VAT)
  vatPercent      Float?   // VAT percentage (e.g., 19)
  priceWithVatLei Float?   // Auto-calculated: priceLei * (1 + vatPercent/100)
  priceWithVatEuro Float?  // Auto-calculated: priceEuro * (1 + vatPercent/100)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  projectSheet    ProjectSheet?
  materials       ProjectDevizMaterial[]
  labor           ProjectDevizLabor[]

  @@index([projectId])
}

// Project Sheet - stores dates, financial parameters, and operations for a deviz line
model ProjectSheet {
  id                        String   @id @default(uuid())
  projectId                 String
  project                   Project  @relation("ProjectSheets", fields: [projectId], references: [id], onDelete: Cascade)
  devizLineId               String   @unique
  devizLine                 ProjectDevizLine @relation(fields: [devizLineId], references: [id], onDelete: Cascade)
  
  // Dates
  initiationDate            DateTime?
  estimatedStartDate        DateTime?
  estimatedEndDate          DateTime?
  
  // Financial parameters (percentages)
  standardMarkupPercent     Float?   // Adaos standard %
  standardDiscountPercent   Float?   // Discount standard %
  indirectCostsPercent      Float?   // Cheltuieli indirecte %
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // Relations
  operations                ProjectSheetOperation[]

  @@index([projectId])
  @@index([devizLineId])
}

// Operations within a project sheet
model ProjectSheetOperation {
  id              String        @id @default(uuid())
  projectSheetId  String
  projectSheet    ProjectSheet  @relation(fields: [projectSheetId], references: [id], onDelete: Cascade)
  orderNum        Int           // Display order
  operationName   String        // e.g., "Tencuieli int. var cu mortar var-ciment"
  unit            String        // e.g., "mp", "mc"
  quantity        Float         // Cantitate
  unitPrice       Float         // Preț unitar
  totalPrice      Float         // Auto-calculated: quantity × unitPrice
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([projectSheetId])
}

// Materials for deviz (Lista Necesar Materiale)
model ProjectDevizMaterial {
  id                    String   @id @default(uuid())
  devizLineId           String
  devizLine             ProjectDevizLine @relation(fields: [devizLineId], references: [id], onDelete: Cascade)
  orderNum              Int      // Display order
  
  // Operation details
  operationCode         String
  operationDescription  String
  
  // Material details
  materialCode          String
  materialDescription   String
  unit                  String   // UM (unitate masura)
  
  // Pricing and calculations
  quantity              Float    // Cantitate
  unitPrice             Float    // Preț unitar
  baseValue             Float    // Valoare bază (quantity × unitPrice)
  markupPercent         Float?   // Adaos %
  valueWithMarkup       Float    // Valoare cu adaos
  discountPercent       Float?   // Discount %
  finalValue            Float    // Valoare finală
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([devizLineId])
}

// Labor for deviz (Manopera proiect)
model ProjectDevizLabor {
  id                    String   @id @default(uuid())
  devizLineId           String
  devizLine             ProjectDevizLine @relation(fields: [devizLineId], references: [id], onDelete: Cascade)
  orderNum              Int      // Display order
  
  // Operation details
  operationCode         String
  operationDescription  String
  
  // Labor details
  laborDescription      String   // Descriere linie manoperă
  
  // Pricing and calculations
  quantity              Float    // Cantitate
  unitPrice             Float    // Preț unitar
  baseValue             Float    // Valoare bază (quantity × unitPrice)
  markupPercent         Float?   // Adaos %
  valueWithMarkup       Float    // Valoare cu adaos
  discountPercent       Float?   // Discount %
  finalValue            Float    // Valoare finală
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([devizLineId])
}

model ClientLocation {
  id        String   @id @default(uuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  name      String   // Name of the location/site
  address   String   // Full address
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Currency {
  RON
  EUR
}

// ---------------- PURCHASE ORDERS MODULE ----------------

enum OrderStatus {
  DRAFT
  WAITING_APPROVAL
  APPROVED
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CLOSED
  CANCELLED
}

enum OrderPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentStatus {
  UNPAID
  PARTIAL
  PAID
  OVERDUE
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  CARD
  OTHER
}

model PurchaseOrder {
  id                   String          @id @default(uuid())
  poNumber             String          @unique
  orderDate            DateTime        @default(now())
  requestedBy          String?
  costCenter           String?
  orderedBy            String?
  approvedBy           String?
  approvedAt           DateTime?
  supplierId           String?
  supplier             Furnizor?       @relation(fields: [supplierId], references: [id])
  supplierContactName  String?
  supplierContactPhone String?
  supplierContactEmail String?
  projectId            String?
  project              Project?        @relation(fields: [projectId], references: [id])
  deliveryAddress      String?
  priority             OrderPriority   @default(MEDIUM)
  status               OrderStatus     @default(DRAFT)
  notes                String?
  promisedDeliveryDate DateTime?
  paymentStatus        PaymentStatus   @default(UNPAID)
  paymentTerms         String?         // ex: "30 zile"
  budgetCode           String?
  currency             Currency        @default(RON)
  exchangeRate         Float?
  subTotal             Float           @default(0)
  totalVat             Float           @default(0)
  totalGross           Float           @default(0)
  receivedPercent      Float           @default(0)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  items                PurchaseOrderItem[]
  receipts             PurchaseReceipt[]
  invoices             PurchaseInvoice[]
  payments             PurchasePayment[]
  attachments          PurchaseOrderAttachment[]
  events               PurchaseOrderEvent[]

  @@index([status])
  @@index([supplierId])
  @@index([projectId])
  @@index([orderDate])
}

model PurchaseOrderItem {
  id             String        @id @default(uuid())
  orderId        String
  order          PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  name           String
  category       String?
  sku            String?
  unit           String?       // U.M.
  qtyOrdered     Float
  qtyReceived    Float          @default(0)
  unitPrice      Float          @default(0)
  currency       Currency?      // defaults to order currency if null
  vatPercent     Float?         // TVA%
  discountPercent Float?        // %
  promisedDate   DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  receiptItems   PurchaseReceiptItem[]
  allocations    POItemAllocation[]
  invoiceDistributions InvoiceDistribution[]

  @@index([orderId])
}

model PurchaseReceipt {
  id          String                @id @default(uuid())
  orderId     String
  order       PurchaseOrder         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  deliveredDate DateTime?
  transporter String?
  awb         String?
  tracking    String?
  note        String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  items       PurchaseReceiptItem[]

  @@index([orderId])
}

model PurchaseReceiptItem {
  id             String           @id @default(uuid())
  receiptId      String
  receipt        PurchaseReceipt  @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  orderItemId    String
  orderItem      PurchaseOrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  quantity       Float
  damagedQuantity Float?          @default(0)
  returnQuantity Float?           @default(0)
  note           String?
  // NEW: actual destination project for this received quantity
  projectId      String?
  project        Project?         @relation(fields: [projectId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([receiptId])
  @@index([orderItemId])
}

model PurchaseInvoice {
  id        String        @id @default(uuid())
  orderId   String
  order     PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  number    String
  date      DateTime
  valueNet  Float
  vatValue  Float
  total     Float
  currency  Currency?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  payments  PurchasePayment[]
  distributions InvoiceDistribution[]

  @@index([orderId])
  @@index([number])
}

model PurchasePayment {
  id         String         @id @default(uuid())
  orderId    String?
  order      PurchaseOrder? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  invoiceId  String?
  invoice    PurchaseInvoice? @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  date       DateTime
  amount     Float
  method     PaymentMethod   @default(BANK_TRANSFER)
  note       String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@index([orderId])
  @@index([invoiceId])
}

model PurchaseOrderAttachment {
  id        String        @id @default(uuid())
  orderId   String
  order     PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  fileName  String
  path      String
  mimeType  String?
  size      Int?
  createdAt DateTime      @default(now())

  @@index([orderId])
}

model PurchaseOrderEvent {
  id        String        @id @default(uuid())
  orderId   String
  order     PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  type      String
  message   String?
  createdBy String?
  createdAt DateTime      @default(now())

  @@index([orderId])
  @@index([type])
}

// Planned allocation of a PO line to multiple projects (by quantity OR percent)
model POItemAllocation {
  id          String            @id @default(uuid())
  orderItemId String
  orderItem   PurchaseOrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project           @relation(fields: [projectId], references: [id])
  qty         Float?            // strategy A: quantity-based allocation
  percent     Float?            // strategy B: percent-based allocation (0..100)
  valueOverride Float?          // optional explicit value override
  note        String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([orderItemId, projectId])
  @@index([projectId])
  @@index([orderItemId])
}

// Financial distribution of an invoice amount to projects
model InvoiceDistribution {
  id         String          @id @default(uuid())
  invoiceId  String
  invoice    PurchaseInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  projectId  String
  project    Project         @relation(fields: [projectId], references: [id])
  amount     Float           // store chosen strategy (gross or net) consistently
  note       String?
  orderItemId String?
  orderItem   PurchaseOrderItem? @relation(fields: [orderItemId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([invoiceId, projectId])
  @@index([projectId])
  @@index([orderItemId])
}

// Categories for operations ("Categorii operatii")
model OperationCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  operations  Operation[]
}

model Operation {
  id         String             @id @default(uuid())
  categoryId String
  category   OperationCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name       String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  items      OperationItem[]

  @@index([categoryId])
  @@unique([categoryId, name])
}

// Third-level items under operations
model OperationItem {
  id          String    @id @default(uuid())
  operationId String
  operation   Operation @relation(fields: [operationId], references: [id], onDelete: Cascade)
  name        String
  unit        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([operationId])
  @@unique([operationId, name])
}

// Tools & Equipment catalog
model Equipment {
  id          String   @id @default(uuid())
  category    String
  code        String   @unique // internal ID / inventory code
  description String
  hourlyCost  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([code])
}

// Employee qualifications catalog
model Qualification {
  id          String     @id @default(uuid())
  name        String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]
  laborLines  LaborLine[]
}

// Labor lines under a qualification (Linii manoperă)
model LaborLine {
  id              String    @id @default(uuid())
  qualificationId String
  qualification   Qualification @relation(fields: [qualificationId], references: [id], onDelete: Restrict)
  name            String
  unit            String    @default("ora")
  hourlyRate      Float
  currency        Currency  @default(RON)
  active          Boolean   @default(true)
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([qualificationId])
  @@unique([qualificationId, name])
}

// Material groups (Grupa Materiale - e.g., Adezivi, Vopsele, etc.)
model MaterialGroup {
  id          String     @id @default(uuid())
  name        String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  materials   Material[]
}

// Material catalog (Materiale) - can have multiple entries from different suppliers
model Material {
  id              String         @id @default(uuid())
  groupId         String?                         // Optional - can be added manually
  group           MaterialGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  code            String                          // Cod material (not unique - same material from different suppliers)
  description     String                          // Descriere (from denumire_produs)
  supplierName    String?                         // Furnizor (from den_tert)
  supplierId      String?                         // ID Tert
  unit            String         @default("buc")  // UM
  price           Decimal        @default(0)      // Preț
  currency        Currency       @default(RON)
  purchaseDate    DateTime?                       // Data achiziției (from data in Excel)
  technicalSheet  String?                         // Path/URL to uploaded technical sheet document
  notes           String?
  active          Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([groupId])
  @@index([code])
  @@index([description])
  @@index([supplierName])
  @@index([code, createdAt])  // Composite index for optimized unique material queries
}
