generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                  String    @id @default(uuid())
  name                String
  location            String
  phone               String?
  email               String?
  registrulComertului String?   @unique
  cui                 String?   @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  projects            Project[]
  locations           ClientLocation[]
}

model Employee {
  id             String    @id @default(uuid())
  name           String
  cnp            String?  @unique // Cod Numeric Personal
  idSeries       String? // "PX"
  idNumber       String? // "821461"
  idIssuer       String? // "SPCLEP Băicoi"
  idIssueDateISO DateTime? // "2021-09-29"
  county         String? // ex: "Prahova"
  locality       String? // ex: "sat Novăcești (com. Florești)" or "Băicoi"
  address        String? // ex: "nr. 295" or full street
  phone          String? // ex: "+40 721 123 456"
  qualifications Qualification[]
  hiredAt        DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  birthDate      DateTime?
  cars           Car[]
  leaves         Leave[]
}

model Leave {
  id         String    @id @default(uuid())
  employeeId String
  startDate  DateTime
  endDate    DateTime?
  days       Int
  note       String?
  createdAt  DateTime  @default(now())
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Car {
  id          String    @id @default(uuid())
  vin         String    @unique
  marca       String
  model       String
  an          Int
  culoare     String?
  placute     String    @unique
  driverId    String?
  driverNote  String?
  combustibil FuelType?
  expItp      DateTime?
  expRca      DateTime?
  expRovi     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  driver      Employee? @relation(fields: [driverId], references: [id])

  @@index([expItp])
  @@index([expRca])
  @@index([expRovi])
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  name         String?
  passwordHash String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  roles        UserRole[]
}

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

model UserRole {
  userId Int
  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

enum FuelType {
  MOTORINA
  BENZINA
  BENZINA_GPL
  HIBRID_MOTORINA
  HIBRID_BENZINA
  ELECTRIC
  ALT
}

enum RoleName {
  ADMIN
  MANAGER
  STAFF
  VIEWER
}

model Furnizor {
  id            String   @id @default(uuid())
  id_tert       String?
  denumire      String   @unique
  cui_cif       String   @unique
  nrRegCom      String?
  tip           String
  tva           Boolean
  tvaData       DateTime?
  adresa        String
  oras          String
  judet         String
  tara          String
  contactNume   String
  email         String
  telefon       String
  site          String?
  metodaPlata   String
  termenPlata   Int      // zile
  contBancar    String
  banca         String
  status        String   // activ/inactiv
  notite        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  purchaseOrders PurchaseOrder[]
}

// Manufacturers / Producers
model Producator {
  id         String   @id @default(uuid())
  name       String   @unique
  status     String   @default("activ") // activ / inactiv
  adresa     String?
  contBancar String?
  banca      String?
  email      String?
  telefon    String?
  site       String?
  observatii String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([status])
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  currency    Currency      @default(RON)
  clientId    String?
  client      Client?       @relation(fields: [clientId], references: [id])
  location    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  purchaseOrders PurchaseOrder[]
  // Back-relations for multi-project PO extensions
  receiptItems        PurchaseReceiptItem[]
  poItemAllocations   POItemAllocation[]
  invoiceDistributions InvoiceDistribution[]

  @@index([status])
  @@index([clientId])
}

model ClientLocation {
  id        String   @id @default(uuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  name      String   // Name of the location/site
  address   String   // Full address
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Currency {
  RON
  EUR
}

// ---------------- PURCHASE ORDERS MODULE ----------------

enum OrderStatus {
  DRAFT
  WAITING_APPROVAL
  APPROVED
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CLOSED
  CANCELLED
}

enum OrderPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentStatus {
  UNPAID
  PARTIAL
  PAID
  OVERDUE
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  CARD
  OTHER
}

model PurchaseOrder {
  id                   String          @id @default(uuid())
  poNumber             String          @unique
  orderDate            DateTime        @default(now())
  requestedBy          String?
  costCenter           String?
  orderedBy            String?
  approvedBy           String?
  approvedAt           DateTime?
  supplierId           String?
  supplier             Furnizor?       @relation(fields: [supplierId], references: [id])
  supplierContactName  String?
  supplierContactPhone String?
  supplierContactEmail String?
  projectId            String?
  project              Project?        @relation(fields: [projectId], references: [id])
  deliveryAddress      String?
  priority             OrderPriority   @default(MEDIUM)
  status               OrderStatus     @default(DRAFT)
  notes                String?
  promisedDeliveryDate DateTime?
  paymentStatus        PaymentStatus   @default(UNPAID)
  paymentTerms         String?         // ex: "30 zile"
  budgetCode           String?
  currency             Currency        @default(RON)
  exchangeRate         Float?
  subTotal             Float           @default(0)
  totalVat             Float           @default(0)
  totalGross           Float           @default(0)
  receivedPercent      Float           @default(0)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  items                PurchaseOrderItem[]
  receipts             PurchaseReceipt[]
  invoices             PurchaseInvoice[]
  payments             PurchasePayment[]
  attachments          PurchaseOrderAttachment[]
  events               PurchaseOrderEvent[]

  @@index([status])
  @@index([supplierId])
  @@index([projectId])
  @@index([orderDate])
}

model PurchaseOrderItem {
  id             String        @id @default(uuid())
  orderId        String
  order          PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  name           String
  category       String?
  sku            String?
  unit           String?       // U.M.
  qtyOrdered     Float
  qtyReceived    Float          @default(0)
  unitPrice      Float          @default(0)
  currency       Currency?      // defaults to order currency if null
  vatPercent     Float?         // TVA%
  discountPercent Float?        // %
  promisedDate   DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  receiptItems   PurchaseReceiptItem[]
  allocations    POItemAllocation[]
  invoiceDistributions InvoiceDistribution[]

  @@index([orderId])
}

model PurchaseReceipt {
  id          String                @id @default(uuid())
  orderId     String
  order       PurchaseOrder         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  deliveredDate DateTime?
  transporter String?
  awb         String?
  tracking    String?
  note        String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  items       PurchaseReceiptItem[]

  @@index([orderId])
}

model PurchaseReceiptItem {
  id             String           @id @default(uuid())
  receiptId      String
  receipt        PurchaseReceipt  @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  orderItemId    String
  orderItem      PurchaseOrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  quantity       Float
  damagedQuantity Float?          @default(0)
  returnQuantity Float?           @default(0)
  note           String?
  // NEW: actual destination project for this received quantity
  projectId      String?
  project        Project?         @relation(fields: [projectId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([receiptId])
  @@index([orderItemId])
}

model PurchaseInvoice {
  id        String        @id @default(uuid())
  orderId   String
  order     PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  number    String
  date      DateTime
  valueNet  Float
  vatValue  Float
  total     Float
  currency  Currency?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  payments  PurchasePayment[]
  distributions InvoiceDistribution[]

  @@index([orderId])
  @@index([number])
}

model PurchasePayment {
  id         String         @id @default(uuid())
  orderId    String?
  order      PurchaseOrder? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  invoiceId  String?
  invoice    PurchaseInvoice? @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  date       DateTime
  amount     Float
  method     PaymentMethod   @default(BANK_TRANSFER)
  note       String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@index([orderId])
  @@index([invoiceId])
}

model PurchaseOrderAttachment {
  id        String        @id @default(uuid())
  orderId   String
  order     PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  fileName  String
  path      String
  mimeType  String?
  size      Int?
  createdAt DateTime      @default(now())

  @@index([orderId])
}

model PurchaseOrderEvent {
  id        String        @id @default(uuid())
  orderId   String
  order     PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  type      String
  message   String?
  createdBy String?
  createdAt DateTime      @default(now())

  @@index([orderId])
  @@index([type])
}

// Planned allocation of a PO line to multiple projects (by quantity OR percent)
model POItemAllocation {
  id          String            @id @default(uuid())
  orderItemId String
  orderItem   PurchaseOrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project           @relation(fields: [projectId], references: [id])
  qty         Float?            // strategy A: quantity-based allocation
  percent     Float?            // strategy B: percent-based allocation (0..100)
  valueOverride Float?          // optional explicit value override
  note        String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([orderItemId, projectId])
  @@index([projectId])
  @@index([orderItemId])
}

// Financial distribution of an invoice amount to projects
model InvoiceDistribution {
  id         String          @id @default(uuid())
  invoiceId  String
  invoice    PurchaseInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  projectId  String
  project    Project         @relation(fields: [projectId], references: [id])
  amount     Float           // store chosen strategy (gross or net) consistently
  note       String?
  orderItemId String?
  orderItem   PurchaseOrderItem? @relation(fields: [orderItemId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([invoiceId, projectId])
  @@index([projectId])
  @@index([orderItemId])
}

// Categories for operations ("Categorii operatii")
model OperationCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  operations  Operation[]
}

model Operation {
  id         String             @id @default(uuid())
  categoryId String
  category   OperationCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name       String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  items      OperationItem[]

  @@index([categoryId])
  @@unique([categoryId, name])
}

// Third-level items under operations
model OperationItem {
  id          String    @id @default(uuid())
  operationId String
  operation   Operation @relation(fields: [operationId], references: [id], onDelete: Cascade)
  name        String
  unit        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([operationId])
  @@unique([operationId, name])
}

// Tools & Equipment catalog
model Equipment {
  id          String   @id @default(uuid())
  category    String
  code        String   @unique // internal ID / inventory code
  description String
  hourlyCost  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([code])
}

// Employee qualifications catalog
model Qualification {
  id          String     @id @default(uuid())
  name        String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]
  laborLines  LaborLine[]
}

// Labor lines under a qualification (Linii manoperă)
model LaborLine {
  id              String    @id @default(uuid())
  qualificationId String
  qualification   Qualification @relation(fields: [qualificationId], references: [id], onDelete: Restrict)
  name            String
  unit            String    @default("ora")
  hourlyRate      Float
  currency        Currency  @default(RON)
  active          Boolean   @default(true)
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([qualificationId])
  @@unique([qualificationId, name])
}
