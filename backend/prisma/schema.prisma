generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                  String    @id @default(uuid())
  name                String
  location            String
  phone               String?
  email               String?
  registrulComertului String?   @unique
  cui                 String?   @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  projects            Project[]
  locations           ClientLocation[]
}

model Employee {
  id             String    @id @default(uuid())
  name           String
  cnp            String?  @unique // Cod Numeric Personal
  idSeries       String? // "PX"
  idNumber       String? // "821461"
  idIssuer       String? // "SPCLEP Băicoi"
  idIssueDateISO DateTime? // "2021-09-29"
  county         String? // ex: "Prahova"
  locality       String? // ex: "sat Novăcești (com. Florești)" or "Băicoi"
  address        String? // ex: "nr. 295" or full street
  phone          String? // ex: "+40 721 123 456"
  qualifications String[]
  hiredAt        DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  birthDate      DateTime?
  cars           Car[]
  leaves         Leave[]
}

model Leave {
  id         String    @id @default(uuid())
  employeeId String
  startDate  DateTime
  endDate    DateTime?
  days       Int
  note       String?
  createdAt  DateTime  @default(now())
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Car {
  id          String    @id @default(uuid())
  vin         String    @unique
  marca       String
  model       String
  an          Int
  culoare     String?
  placute     String    @unique
  driverId    String?
  driverNote  String?
  combustibil FuelType?
  expItp      DateTime?
  expRca      DateTime?
  expRovi     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  driver      Employee? @relation(fields: [driverId], references: [id])

  @@index([expItp])
  @@index([expRca])
  @@index([expRovi])
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  name         String?
  passwordHash String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  roles        UserRole[]
}

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

model UserRole {
  userId Int
  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

enum FuelType {
  MOTORINA
  BENZINA
  BENZINA_GPL
  HIBRID_MOTORINA
  HIBRID_BENZINA
  ELECTRIC
  ALT
}

enum RoleName {
  ADMIN
  MANAGER
  STAFF
  VIEWER
}

model Furnizor {
  id            String   @id @default(uuid())
  id_tert       String?
  denumire      String   @unique
  cui_cif       String   @unique
  nrRegCom      String?
  tip           String
  tva           Boolean
  tvaData       DateTime?
  adresa        String
  oras          String
  judet         String
  tara          String
  contactNume   String
  email         String
  telefon       String
  site          String?
  metodaPlata   String
  termenPlata   Int      // zile
  contBancar    String
  banca         String
  status        String   // activ/inactiv
  notite        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  currency    Currency      @default(RON)
  clientId    String?
  client      Client?       @relation(fields: [clientId], references: [id])
  location    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([status])
  @@index([clientId])
}

model ClientLocation {
  id        String   @id @default(uuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  name      String   // Name of the location/site
  address   String   // Full address
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Currency {
  RON
  EUR
}

// Categories for operations ("Categorii operatii")
model OperationCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  operations  Operation[]
}

model Operation {
  id         String             @id @default(uuid())
  categoryId String
  category   OperationCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name       String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  items      OperationItem[]

  @@index([categoryId])
  @@unique([categoryId, name])
}

// Third-level items under operations
model OperationItem {
  id          String    @id @default(uuid())
  operationId String
  operation   Operation @relation(fields: [operationId], references: [id], onDelete: Cascade)
  name        String
  unit        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([operationId])
  @@unique([operationId, name])
}

// Tools & Equipment catalog
model Equipment {
  id          String   @id @default(uuid())
  category    String
  code        String   @unique // internal ID / inventory code
  description String
  hourlyCost  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([code])
}
